name: 'Manual Validation'

on:
  workflow_dispatch:
    inputs:
      modules_to_validate:
        description: List of modules to validate (space separated). If left blank then all modules will get validated
        type: string
        default: homes-core decision-centre broker-portal integration-services question-management-system doc-comms
      environment:
        description: Environment
        type: environment
        required: true
      test_level:
        description: Apex Unit Tests Level
        type: choice
        required: true
        options:
          - NoTestRun
          - RunAllTestsInOrg
          - RunLocalTests
          - RunSpecifiedTests
        default: RunLocalTests  
      specified_tests:
        description: Apex Unit Tests (space separated). Keep input empty if you didn't select RunSpecifiedTests
        type: string
        required: false
      base_ref:
        description: Ref to compare (usually "develop"); Used to generate delta package
        required: false
        type: string  
  workflow_call:
    secrets:
        SFDX_AUTH_URL:
          required: false
    inputs:
      environment:
        description: Environment
        type: string
        required: true
      modules_to_validate:
        description: List of modules to validate (space separated). If left blank then all modules will get validated
        required: true
        type: string
        default: homes-core decision-centre broker-portal integration-services question-management-system doc-comms
      base_ref:
        description: Ref to compare (usually "develop"); Used to generate delta package
        required: false
        type: string
      test_level:
        description: Apex Unit Tests Level
        required: false
        type: string
      specified_tests:
        description: Apex Unit Tests (space separated). Keep input empty if you didn't select RunSpecifiedTests
        required: false
        type: string  
      is_release_branch:
        description: Indicates if this is a release branch
        type: boolean
        required: false  
jobs:
  validate-changes:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      WORKING_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      SF_CLI_VERSION: ${{ vars.SF_CLI_VERSION }}
      SKIP_ORG_INTERACTION: ${{ vars.SKIP_ORG_INTERACTION }}
      # Sets the deployment destination from sfdx-project.json
      SF_APPLY_REPLACEMENTS_ON_CONVERT: ${{ vars.SF_APPLY_REPLACEMENTS_ON_CONVERT }}
      API_MORTGAGE_ONBOARDING_PASSTHRU: ${{ vars.API_MORTGAGE_ONBOARDING_PASSTHRU }}
      DEPLOY_DESTINATION: ${{ vars.DEPLOY_DESTINATION }}
      SEVERITY: ${{ vars.SEVERITY }}
      IGNORED_SCAN_MODULES: ${{ vars.IGNORED_SCAN_MODULES }}
      IS_OMNI_STUDIO_ENABLED: ${{ vars.IS_OMNI_STUDIO_ENABLED }}
      IS_RELEASE_BRANCH: ${{ inputs.is_release_branch }}
    outputs:
      should_notify: ${{ steps.check.outputs.should_notify }}
      failed_job_name: ${{ steps.check.outputs.failed_job }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate src-temp folder changes
        id: temp_folder
        run: |
          chmod +x ./devops-scripts/tempFolder.sh
          ./devops-scripts/tempFolder.sh
          
      - name: Authenticate
        id: auth
        env:
          SFDXAUTHURL: ${{secrets.SFDX_AUTH_URL}}
        run:  |
          echo "${{ github.event_name }}"
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "Auth step running for merge queue"
            exit 1
          else
            echo "Skipping Auth step as it's not a merge_queue event"
          fi

      - name: Cancel Job
        id: cancel
        if: ${{ cancelled() }}
        run: |
#          chmod +x ./devops-scripts/cancelJob.sh
#          if [ -n "${{ steps.validate_changes.outputs.deployment_id }}" ]; then
#            ./devops-scripts/cancelJob.sh  ${{ steps.validate_changes.outputs.deployment_id }}
#          elif [ -n "${{ steps.validate_omni_changes.outputs.omni_deployment_id }}" ]; then
#            ./devops-scripts/cancelJob.sh ${{ steps.validate_omni_changes.outputs.omni_deployment_id }}
#          fi
#
      - name: Check failure
        id: check
        if: failure() && (steps.auth.outcome == 'failure' || steps.cancel.outcome == 'failure')
        run: |
          echo "${{ github.job }}"
          echo "${{ job.status }}"
          echo "failed_job=${{ github.job }}" >> $GITHUB_OUTPUT
          echo "should_notify=true" >> $GITHUB_OUTPUT

  notify:
    runs-on: ubuntu-latest
    needs: validate-changes
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Send Teams notification
        run: |
          chmod +x ./devops-scripts/runTeamsNotification.sh
          ./devops-scripts/runTeamsNotification.sh
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_URL: ${{ github.server_url }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_RUN: ${{ github.run_id }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}
          PR_LINK: ${{ github.event.pull_request.html_url }}
          FAILED_JOB_NAME: ${{ needs.validate-changes.outputs.failed_job_name }}
